[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Spice Girls Project",
    "section": "",
    "text": "Preface\nPosh, Ginger, Baby, Sporty, and Scary. What do these five words have in common?\nSPICE!!\nThe Spice Girls formed in 1994 after auditions were held to form a girl group to rival the boy bands dominating the airwaves at the time. By 1996, the group, consisting of Mel B (Scary), Melanie C (Sporty), Emma Bunton (Baby), Geri Halliwell-Horner (Ginger), Victoria Beckham (Posh), had found incredible success with their debut single “Wannabe.” Over the following five years, the Spice Girls emerged as superstars, and are now seen as definitive cultural icons of the 90s. In this data analysis, we will explore aspects of their music and lyrics to hopefully discover the reasons for their smashing success.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "eda-mayumi.html",
    "href": "eda-mayumi.html",
    "title": "1  Data Overview",
    "section": "",
    "text": "1.1 Data Upload\nlyrics &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-14/lyrics.csv')\n\nRows: 1885 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): artist_name, album_name, song_name, section_name, line, section_artist\ndbl (3): track_number, song_id, line_number\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstudio_album_tracks &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-14/studio_album_tracks.csv')\n\nRows: 31 Columns: 25\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (9): artist_name, artist_id, album_id, track_id, track_name, album_nam...\ndbl  (15): album_release_year, danceability, energy, key, loudness, mode, sp...\ndate  (1): album_release_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Overview</span>"
    ]
  },
  {
    "objectID": "eda-mayumi.html#lyrics-data",
    "href": "eda-mayumi.html#lyrics-data",
    "title": "1  Data Overview",
    "section": "1.2 Lyrics Data",
    "text": "1.2 Lyrics Data\n\n1.2.1 Data Set Structure\n\nstr(lyrics)\n\nspc_tbl_ [1,885 × 9] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ artist_name   : chr [1:1885] \"Spice Girls\" \"Spice Girls\" \"Spice Girls\" \"Spice Girls\" ...\n $ album_name    : chr [1:1885] \"Spice\" \"Spice\" \"Spice\" \"Spice\" ...\n $ track_number  : num [1:1885] 1 1 1 1 1 1 1 1 1 1 ...\n $ song_id       : num [1:1885] 89740 89740 89740 89740 89740 ...\n $ song_name     : chr [1:1885] \"Wannabe\" \"Wannabe\" \"Wannabe\" \"Wannabe\" ...\n $ line_number   : num [1:1885] 1 2 3 4 5 6 7 8 9 10 ...\n $ section_name  : chr [1:1885] \"Intro\" \"Intro\" \"Intro\" \"Intro\" ...\n $ line          : chr [1:1885] \"Hahaha\" \"Yo, I'll tell you what I want, what I really, really want\" \"So tell me what you want, what you really, really want\" \"I'll tell you what I want, what I really, really want\" ...\n $ section_artist: chr [1:1885] \"Scary, Ginger\" \"Scary, Ginger\" \"Scary, Ginger\" \"Scary, Ginger\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   artist_name = col_character(),\n  ..   album_name = col_character(),\n  ..   track_number = col_double(),\n  ..   song_id = col_double(),\n  ..   song_name = col_character(),\n  ..   line_number = col_double(),\n  ..   section_name = col_character(),\n  ..   line = col_character(),\n  ..   section_artist = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\n\n\n1.2.2 Total number of lines in Spice Girls songs\n\nlyrics |&gt;\n  group_by(song_name) |&gt;\n  summarise(total_lines = max(line_number))\n\n# A tibble: 31 × 2\n   song_name                    total_lines\n   &lt;chr&gt;                              &lt;dbl&gt;\n 1 \"2 Become 1\"                          42\n 2 \"Denying\"                             71\n 3 \"Do It\"                               71\n 4 \"Get Down With Me\"                    53\n 5 \"Goodbye\"                             53\n 6 \"Holler\"                             105\n 7 \"If U Can\\x92t Dance\"                 73\n 8 \"If You Wanna Have Some Fun\"          68\n 9 \"Last Time Lover\"                     72\n10 \"Let Love Lead the Way\"               67\n# ℹ 21 more rows\n\n\n\n\n1.2.3 How many song lines are there in each section category?\n\nsection_count &lt;- lyrics |&gt;\n  count(section_name)\n\nggplot(section_count, aes(x = reorder(section_name, -n), y = n)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(\n    title = \"Amount of Song Lines per Section\",\n    x = \"Section Name\",\n    y = \"Number of Lines\") +\n  coord_flip()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Overview</span>"
    ]
  },
  {
    "objectID": "eda-mayumi.html#studio-album-tracks-data",
    "href": "eda-mayumi.html#studio-album-tracks-data",
    "title": "1  Data Overview",
    "section": "1.3 Studio Album Tracks Data",
    "text": "1.3 Studio Album Tracks Data\n\n1.3.1 Data Set Structure\n\nstr(studio_album_tracks)\n\nspc_tbl_ [31 × 25] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ artist_name       : chr [1:31] \"Spice Girls\" \"Spice Girls\" \"Spice Girls\" \"Spice Girls\" ...\n $ artist_id         : chr [1:31] \"0uq5PttqEjj3IH1bzwcrXF\" \"0uq5PttqEjj3IH1bzwcrXF\" \"0uq5PttqEjj3IH1bzwcrXF\" \"0uq5PttqEjj3IH1bzwcrXF\" ...\n $ album_id          : chr [1:31] \"4jbWZmf7kRxCBD6tgVepYh\" \"4jbWZmf7kRxCBD6tgVepYh\" \"4jbWZmf7kRxCBD6tgVepYh\" \"4jbWZmf7kRxCBD6tgVepYh\" ...\n $ album_release_date: Date[1:31], format: \"2000-01-01\" \"2000-01-01\" ...\n $ album_release_year: num [1:31] 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ danceability      : num [1:31] 0.769 0.829 0.614 0.736 0.86 0.798 0.671 0.571 0.709 0.536 ...\n $ energy            : num [1:31] 0.819 0.764 0.788 0.779 0.71 0.751 0.75 0.481 0.872 0.539 ...\n $ key               : num [1:31] 10 5 11 8 1 5 1 0 7 11 ...\n $ loudness          : num [1:31] -3.94 -3.78 -5.55 -5.16 -4.21 ...\n $ mode              : num [1:31] 0 0 1 1 0 0 1 1 0 1 ...\n $ speechiness       : num [1:31] 0.0431 0.0431 0.027 0.0401 0.0356 0.0486 0.0279 0.0251 0.0443 0.0272 ...\n $ acousticness      : num [1:31] 0.0293 0.0287 0.155 0.0172 0.00259 0.009 0.188 0.177 0.253 0.744 ...\n $ instrumentalness  : num [1:31] 3.70e-03 3.29e-06 0.00 3.30e-03 3.57e-05 0.00 0.00 0.00 1.06e-02 5.68e-06 ...\n $ liveness          : num [1:31] 0.0744 0.0512 0.157 0.118 0.0387 0.186 0.296 0.18 0.287 0.094 ...\n $ valence           : num [1:31] 0.82 0.919 0.405 0.573 0.884 0.809 0.407 0.0734 0.858 0.307 ...\n $ tempo             : num [1:31] 110 104 116 101 110 ...\n $ track_id          : chr [1:31] \"1NwDWbpg9dPH12xBd2ibrv\" \"0r5d5LmhLQwJVEw0kTEExp\" \"5EE1Uzg0JvtBhs6TRs33R0\" \"2O8kqbUJS1vkL3x9mF7WzM\" ...\n $ time_signature    : num [1:31] 4 4 4 4 4 4 4 4 4 4 ...\n $ duration_ms       : num [1:31] 255866 254666 298293 251000 226266 ...\n $ track_name        : chr [1:31] \"Holler\" \"Tell Me Why\" \"Let Love Lead The Way\" \"Right Back At Ya\" ...\n $ track_number      : num [1:31] 1 2 3 4 5 6 7 8 9 10 ...\n $ album_name        : chr [1:31] \"Forever\" \"Forever\" \"Forever\" \"Forever\" ...\n $ key_name          : chr [1:31] \"A#\" \"F\" \"B\" \"G#\" ...\n $ mode_name         : chr [1:31] \"minor\" \"minor\" \"major\" \"major\" ...\n $ key_mode          : chr [1:31] \"A# minor\" \"F minor\" \"B major\" \"G# major\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   artist_name = col_character(),\n  ..   artist_id = col_character(),\n  ..   album_id = col_character(),\n  ..   album_release_date = col_date(format = \"\"),\n  ..   album_release_year = col_double(),\n  ..   danceability = col_double(),\n  ..   energy = col_double(),\n  ..   key = col_double(),\n  ..   loudness = col_double(),\n  ..   mode = col_double(),\n  ..   speechiness = col_double(),\n  ..   acousticness = col_double(),\n  ..   instrumentalness = col_double(),\n  ..   liveness = col_double(),\n  ..   valence = col_double(),\n  ..   tempo = col_double(),\n  ..   track_id = col_character(),\n  ..   time_signature = col_double(),\n  ..   duration_ms = col_double(),\n  ..   track_name = col_character(),\n  ..   track_number = col_double(),\n  ..   album_name = col_character(),\n  ..   key_name = col_character(),\n  ..   mode_name = col_character(),\n  ..   key_mode = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\n\n\n1.3.2 How many tracks are there per album?\n\ntracks_per_album &lt;- studio_album_tracks |&gt;\n  group_by(album_name, key_name) |&gt;\n  summarise(tracks = n(), .groups = \"drop\")\n\nggplot(tracks_per_album, aes(x = reorder(album_name, -tracks), y = tracks, fill = key_name)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Number of Tracks in Each Album\",\n       x = \"Album\",\n       y = \"Number of Tracks\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n1.3.3 What is the average length of each track? (Grouped by track number)\n\naverage_duration &lt;- studio_album_tracks |&gt;\n  mutate(duration_seconds = duration_ms / 1000) |&gt;\n  group_by(track_number) |&gt;\n  summarise(avg_duration = mean(duration_seconds, na.rm = TRUE))\n\nggplot(average_duration, aes(x = track_number, y = avg_duration)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Track Duration by Track Number\",\n       x = \"Track Number\",\n       y = \"Average Duration (seconds)\") +\n  theme_minimal()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Overview</span>"
    ]
  },
  {
    "objectID": "eda-JackHou.html",
    "href": "eda-JackHou.html",
    "title": "",
    "section": "",
    "text": "Code",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>eda-JackHou.html</span>"
    ]
  },
  {
    "objectID": "EDA-Cody.html",
    "href": "EDA-Cody.html",
    "title": "",
    "section": "",
    "text": "Code",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>EDA-Cody.html</span>"
    ]
  },
  {
    "objectID": "proposal.html",
    "href": "proposal.html",
    "title": "Proposal",
    "section": "",
    "text": "Project Proposal Mayumi Morgan, Cody Da, Jack Hou, and Enrico Verità Data set: Spice up your Life\nWe will analyze the data set “Spice up your Life” which contains information regarding the famous music group the Spice Girls. This data set contains information on album release date, energy, liveliness, danceability, and general statistics on various Spice Girl tracks. We chose this set because we are interested in music and this seems fun and interesting topic. We want to analyze lyrics and maybe analyze which band member sings the most, or we could see which song is the best to dance to.\nOverarching research question:\n\nWhat kind of music did the spice girls make?\n\nDid their music style change over time? If so, how?\n\nWhat kind of themes did the Spice Girls sing about?\nWho was the most popular member?\n\nWho sang the most lines?\n\n\nWhy is it important:\n\nThe Spice Girls were a large part of the cultural zeitgeist of the 90s and early 2000s, influencing music, fashion, as well as other artists. Despite their relatively short time as a group, they remain popular is, as shown by their Olympic performance in 2012 at the London Olympic over a decade after their official disbandment. In 2019 the group reunited and embarked on a European tour. The “Spice World” tour became the highest grossing all-female tour from 2000-2020. This begs the question: what makes their music so successful?\n\nWhere the data comes from:\nThe data in this repo comes from Spotify and Genius. Thank you to the authors of the spotifyr and geniusr packages for making it easy to access data from these platforms!\nThere are 3 data sets about or related to the Spice Girls:\n\nstudio_album_tracks: Audio features of each song from the three studio albums by the Spice Girls. From Spotify.\nrelated artists: Artists deemed to be similar to the Spice Girls, with info about each artist including their musical genres and follower numbers. Includes a row with details for the Spice Girls, for comparison purposes. From Spotify.\nlyrics: Lyrics of each song from the three studio albums by the Spice Girls. From Genius.\n\nCredit: Jacquie Tran\n*taken from Tidytuesday",
    "crumbs": [
      "Appendices",
      "Proposal"
    ]
  },
  {
    "objectID": "sketch.html",
    "href": "sketch.html",
    "title": "Sketch",
    "section": "",
    "text": "Project Sketch 1\n\n\n\n\n\nProject Sketch 2",
    "crumbs": [
      "Appendices",
      "Sketch"
    ]
  },
  {
    "objectID": "eda-enrico.html",
    "href": "eda-enrico.html",
    "title": "2  Lyrical Analysis",
    "section": "",
    "text": "Hello\n\nlyrics &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-14/lyrics.csv')\n\nstudio_album_tracks &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-14/studio_album_tracks.csv')\n\nrelated_artists &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-14/related_artists.csv')\n\n\nlibrary(tidyverse)\n#For each album, calculate mean values for danceability, energy, and valence\nstudio_album_tracks %&gt;%\n  group_by(album_name) %&gt;%\n  summarise(\n    danceability_mean = mean(danceability),\n    energy_mean = mean(energy),\n    valence_mean = mean(valence)) %&gt;%\n  ungroup() %&gt;%\n#Set factor levels of album_name\n  mutate(\n    album_name = factor(\n      album_name, levels = c(\"Spice\", \"Spiceworld\", \"Forever\"))) %&gt;%\n  arrange(album_name)\n\n# A tibble: 3 × 4\n  album_name danceability_mean energy_mean valence_mean\n  &lt;fct&gt;                  &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;\n1 Spice                  0.694       0.731        0.756\n2 Spiceworld             0.570       0.776        0.642\n3 Forever                0.695       0.722        0.583\n\n\nWhat do the variables mean?:\nData link: https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-12-14/readme.md\n\n#Who is the most popular member?\nlibrary(tidyverse)\nmember_lines &lt;- lyrics |&gt;\n  select(section_artist) |&gt; \n  mutate(Sporty = str_detect(section_artist, \"Sporty\")) |&gt; \n  mutate(Scary = str_detect(section_artist, \"Scary\")) |&gt;\n  mutate(Posh = str_detect(section_artist, \"Posh\")) |&gt;\n  mutate(Baby = str_detect(section_artist, \"Baby\")) |&gt; \n  mutate(Ginger = str_detect(section_artist, \"Ginger\")) |&gt; \n  summarize(\n    total_Sporty = sum(Sporty, na.rm = TRUE),\n    total_Scary = sum(Scary, na.rm = TRUE),\n    total_Posh = sum(Posh, na.rm = TRUE),\n    total_Baby = sum(Baby, na.rm = TRUE),\n    total_Ginger = sum(Ginger, na.rm = TRUE)\n  ) \n\nmember_lines &lt;- member_lines |&gt; \n  pivot_longer(cols = everything(), \n               names_to = \"Member\", \n               values_to = \"Number of Lines\") |&gt; \n  mutate(Member = str_replace(Member, \"total_\", \"\"))\n\nggplot(member_lines |&gt; \n         mutate(Member = fct_reorder(Member, `Number of Lines`)), \n       aes(x = Member, y = `Number of Lines`, fill = Member)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    title = \"Number of Total Lines for each Spice Girl\",\n    x = \"Spice Girls\",\n    y = \"Number of Lines\"\n  ) +\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Set2\") \n\n\n\n\n\n\n\n\nPerhaps different albums promoted different members? Released in 1996, Scary Spice was actually featured the most in their first album, Spice. Coming in second and third were Ginger and Baby Spice. The release of the second album Spiceworld, however, placed Sporty Spice in a more prominent role musically. She rose from having the fourth most lines to being the clear favorite, as the graph below shows. Scary Spice fell to third, with Baby Spice rising to second and Ginger falling further behind. Why did Sporty Spice receive so many more during the second album? There may not be one clear answer. Audience preferences, musical ability, and more are all factors that could explain the change. One thing is certain, however: Sporty Spice, on paper, became the most popular member of the Spice Girls.\n\n#What About Individual Albums?\nmember_album_lines_per_album &lt;- lyrics |&gt;\n  select(album_name, section_artist) |&gt; \n  mutate(\n    Sporty = str_detect(section_artist, \"Sporty\"),\n    Scary = str_detect(section_artist, \"Scary\"),\n    Posh = str_detect(section_artist, \"Posh\"),\n    Baby = str_detect(section_artist, \"Baby\"),\n    Ginger = str_detect(section_artist, \"Ginger\")\n  ) |&gt; \n  group_by(album_name) |&gt; \n  summarize(\n    total_sporty = sum(Sporty, na.rm = TRUE),\n    total_scary = sum(Scary, na.rm = TRUE),\n    total_posh = sum(Posh, na.rm = TRUE),\n    total_baby = sum(Baby, na.rm = TRUE),\n    total_ginger = sum(Ginger, na.rm = TRUE),\n    .groups = \"drop\"\n  ) |&gt; \n  pivot_longer(\n    cols = starts_with(\"total_\"),\n    names_to = \"Member\",\n    values_to = \"Number of Lines\"\n  ) |&gt; \n  mutate(Member = str_replace(Member, \"total_\", \"\"))  # Clean up the member names\n\n# Visualize the number of lines per member by album\nggplot(member_album_lines_per_album |&gt; \n         mutate(Member = fct_reorder(Member, `Number of Lines`)), \n                aes(x = album_name, y = `Number of Lines`, fill = Member)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(\n    title = \"Number of Lines for Each Spice Girl by Album\",\n    x = \"Album\",\n    y = \"Number of Lines\"\n  ) +\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Set2\")\n\n\n\n\n\n\n\n\nBut what about the third album? Geri Halliwell-Horton left the group in 1998 to the shock of fans citing creative differences, exhaustion, as well as rumored arguments with Mel B. In response, The four remaining members remained and adapted their musical style and image for their next album Forever.\nDespite a new R/B sound, Sporty Spice remained as the member with the most lines. Interestingly, the album has the least amount of lines out of their entire discography.\n\n#What are the main lyrical themes? Let's start with top words\nlibrary(tokenizers)\nlibrary(tidytext)\nlyrics_data &lt;- lyrics |&gt; \n  mutate(clean_lyrics = str_to_lower(line),  # Convert to lowercase\n         clean_lyrics = str_replace_all(clean_lyrics, \"[^a-z\\\\s]\", \"\"),  # Remove punctuation\n         clean_lyrics = str_squish(clean_lyrics))  # Remove extra spaces\n\ntokens &lt;- lyrics_data |&gt; \n  unnest_tokens(word, clean_lyrics)  # 'word' column will contain individual words\n\nbigrams &lt;- lyrics_data |&gt; \n  unnest_tokens(bigram, clean_lyrics, token = \"ngrams\", n = 2)\n\ndata(\"stop_words\")\ntokens &lt;- tokens |&gt; \n  anti_join(stop_words, by = \"word\")\n\nword_counts &lt;- tokens |&gt; \n  count(word, sort = TRUE)\n\n# View top words\nhead(word_counts)\n\n# A tibble: 6 × 2\n  word      n\n  &lt;chr&gt; &lt;int&gt;\n1 love    137\n2 time    105\n3 wanna   102\n4 youre    93\n5 dont     92\n6 la       85\n\nword_counts |&gt; \n  slice_max(n, n = 20) |&gt; \n  ggplot(aes(x = reorder(word, n), y = n)) +\n  geom_col(fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = \"Top Words in Song Lyrics\", x = \"Word\", y = \"Count\")\n\n\n\n\n\n\n\n\n\n#Sentiment analysis\n\n# Example using Bing lexicon\nsentiment_scores &lt;- tokens |&gt; \n  inner_join(get_sentiments(\"bing\"), by = \"word\") |&gt; \n  count(sentiment, sort = TRUE)\n\n# Visualize sentiment\nsentiment_scores |&gt; \n  ggplot(aes(x = sentiment, y = n, fill = sentiment)) +\n  geom_col() +\n  labs(title = \"Sentiment Analysis of Lyrics\", x = \"Sentiment\", y = \"Count\") +\n  scale_fill_manual(values = c(\"positive\" = \"green\", \"negative\" = \"red\"))\n\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(tokenizers)\n\ntf_idf &lt;- tokens |&gt; \n  count(song_name, word, sort = TRUE) |&gt;  # Replace 'song_id' with a song identifier column\n  bind_tf_idf(word, song_name, n)\n\n# View top TF-IDF words\ntf_idf |&gt; \n  arrange(desc(tf_idf)) |&gt; \n  head(10)\n\n# A tibble: 10 × 6\n   song_name               word           n    tf   idf tf_idf\n   &lt;chr&gt;                   &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1 \"Saturday Night Divas\"  deeper        41 0.247  3.43  0.848\n 2 \"If U Can\\x92t Dance\"   dance         60 0.278  2.74  0.761\n 3 \"Holler\"                holler        48 0.194  3.43  0.665\n 4 \"Naked\"                 naked         29 0.190  3.43  0.651\n 5 \"Move Over\"             generation    41 0.237  2.74  0.650\n 6 \"Saturday Night Divas\"  saturday      29 0.175  3.43  0.600\n 7 \"Spice Up Your Life\"    la            64 0.249  2.34  0.582\n 8 \"Mama\"                  loving        22 0.168  2.74  0.460\n 9 \"Weekend Love\"          weekend       16 0.126  3.43  0.433\n10 \"Something Kinda Funny\" kinda         18 0.126  3.43  0.432\n\nbigram_counts &lt;- bigrams |&gt; \n  count(bigram, sort = TRUE)\n\n\nlibrary(topicmodels)\n\n# Create a document-term matrix\ndtm &lt;- tokens |&gt; \n  count(song_name, word) |&gt; \n  cast_dtm(song_name, word, n)\n\n# Fit LDA model\nlda_model &lt;- LDA(dtm, k = 3, control = list(seed = 123))  # 'k' is the number of topics\ntopics &lt;- tidy(lda_model, matrix = \"beta\")\n\n# View top words per topic\ntopics |&gt; \n  group_by(topic) |&gt; \n  slice_max(beta, n = 10) |&gt; \n  ungroup() |&gt; \n  ggplot(aes(x = reorder_within(term, beta, topic), y = beta, fill = factor(topic))) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ topic, scales = \"free\") +\n  coord_flip() +\n  scale_x_reordered() +\n  labs(title = \"Top Words per Topic\", x = \"Word\", y = \"Beta\")\n\n\n\n\n\n\n\ntopics &lt;- tidy(lda_model, matrix = \"beta\")  # \"beta\" represents the word-topic distributions\n\ntop_words &lt;- topics %&gt;%\n  group_by(topic) %&gt;%\n  slice_max(beta, n = 10) %&gt;%  # Get top 10 words for each topic\n  ungroup()\n\n# Visualize the top words for each topic\ntop_words %&gt;%\n  ggplot(aes(x = reorder_within(term, beta, topic), y = beta, fill = factor(topic))) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ topic, scales = \"free\") +\n  coord_flip() +\n  scale_x_reordered() +\n  labs(title = \"Top Words per Topic\", x = \"Word\", y = \"Beta\")\n\n\n\n\n\n\n\nlibrary(wordcloud)\ntopics %&gt;%\n  group_by(topic) %&gt;%\n  slice_max(beta, n = 10) %&gt;%\n  with(wordcloud(term, beta, max.words = 10, colors = brewer.pal(8, \"Dark2\")))\n\n\n\n\n\n\n\nSong_topics &lt;- tidy(lda_model, matrix = \"gamma\")  # 'gamma' represents the document-topic distributions\n\nSong_topics_wide &lt;- Song_topics %&gt;%\n  pivot_wider(\n    names_from = topic,  # The topic column will become the new column names\n    values_from = gamma,  # The gamma values will fill the columns\n  )\n\n# View document-topic distribution\nhead(Song_topics_wide)\n\n# A tibble: 6 × 4\n  document               `1`      `2`       `3`\n  &lt;chr&gt;                &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 2 Become 1       0.186     0.0875   0.727    \n2 Denying          1.00      0.000163 0.000163 \n3 Do It            0.000165  0.000165 1.00     \n4 Get Down With Me 0.999     0.000318 0.000318 \n5 Goodbye          0.000264  0.000264 0.999    \n6 Holler           0.0000949 1.00     0.0000949\n\n\n\n#topic distribution by album\n\ntopics_wide &lt;- read_csv(\"data/topics_wide.csv\")\n\n\nalbum_topics &lt;- topics_wide |&gt; \n  group_by(Album) |&gt; \n  summarize(mean_1 = mean(`1`), mean_2 = mean(`2`), mean_3 = mean(`3`),\n            .groups = \"drop\") |&gt; \n  pivot_longer(cols = starts_with(\"mean\"), names_to = \"topics\", \n               values_to = \"mean of topics\")\n\nggplot(album_topics |&gt; \n          mutate(Album = fct_reorder(Album, `mean of topics`)), \n       aes(x = Album, y = `mean of topics`, fill = topics)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(\n    title = \"Topic Distribution Across Spice Girls Albums\",\n    x = \"Album\",\n    y = \"Mean Topic Proportion\",\n    fill = \"Topic\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n#What is TF-IDF?\nTF-IDF stands for term frequency-inverse document frequency. This model can be applied to a few different purposes, but I use it specifically for text summarization and keyword extraction to find and quantify the importance of specific words in Spice Girls songs.\nTerm frequency: There are multiple ways to define frequency, but here, it means the frequency of a particular word in the songs; how often a word is said in a song.\nInverse document frequency: I use this to find how common or uncommon a word is in the lyrics. This is particularly important to filter out filler words like “of” and “as.”\nUsing both TF and IDF, I tried to find which words hold the most relevance in their songs. The higher the TF-IDF score, the more relevance the word holds in the song, while the less relevant it is, the closer the score is to zero.\nThis model isn’t perfect, though. There may be some words, like “love,” that are extremely common in their songs. However, their tf-idf score may be low because it is not especially unique, though it is still extremely important.\nhttps://www.capitalone.com/tech/machine-learning/understanding-tf-idf/\n#What is LDA Analysis?\nLDA analysis is a “probabilistic generative model” used here to analyze a collection of text–Spice Girls lyrics. You could also use this for articles, books, and other text. LDA approaches documents as a collection of themes or “Topics,” which it them hopes to uncover by analyzing the words of the document.\nhttps://medium.com/@pinakdatta/understanding-lda-unveiling-hidden-topics-in-text-data-9bbbd25ae162\nhttps://en.wikipedia.org/wiki/Latent_Dirichlet_allocation#:~:text=In%20natural%20language%20processing%2C%20latent,of%20a%20Bayesian%20topic%20model.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Lyrical Analysis</span>"
    ]
  }
]