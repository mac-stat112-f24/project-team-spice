---
title: "Lyrical Analysis"
number-sections: true
execute: 
  warning: false
fig-env: 'figure'
fig-pos: 'h'
fig-align: center
code-fold: false
---

Hello

```{r}
lyrics <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-14/lyrics.csv')

studio_album_tracks <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-14/studio_album_tracks.csv')

related_artists <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-14/related_artists.csv')

```

```{r}
library(tidyverse)
#For each album, calculate mean values for danceability, energy, and valence
studio_album_tracks %>%
  group_by(album_name) %>%
  summarise(
    danceability_mean = mean(danceability),
    energy_mean = mean(energy),
    valence_mean = mean(valence)) %>%
  ungroup() %>%
#Set factor levels of album_name
  mutate(
    album_name = factor(
      album_name, levels = c("Spice", "Spiceworld", "Forever"))) %>%
  arrange(album_name)
```

What do the variables mean?:

Data link: https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-12-14/readme.md

```{r, fig.alt= A bar graph depicting the total lines for each member of the Spice Girls in the entire discography in order to determine who the most popular member was. Sporty Spice has the most, followed by Baby Spice, then Scary Spice, then Ginger Spice, then Posh Spice.}

#Who is the most popular member?
library(tidyverse)
library(plotly)
library(showtext)
library(topicmodels)
library(tidytext)
library(tokenizers)
library(tidytext)
library(ggtext)



member_lines <- lyrics |>
  select(section_artist) |> 
  mutate(Sporty = str_detect(section_artist, "Sporty")) |> 
  mutate(Scary = str_detect(section_artist, "Scary")) |>
  mutate(Posh = str_detect(section_artist, "Posh")) |>
  mutate(Baby = str_detect(section_artist, "Baby")) |> 
  mutate(Ginger = str_detect(section_artist, "Ginger")) |> 
  summarize(
    total_Sporty = sum(Sporty, na.rm = TRUE),
    total_Scary = sum(Scary, na.rm = TRUE),
    total_Posh = sum(Posh, na.rm = TRUE),
    total_Baby = sum(Baby, na.rm = TRUE),
    total_Ginger = sum(Ginger, na.rm = TRUE)
  ) 

member_lines <- member_lines |> 
  pivot_longer(cols = everything(), 
               names_to = "Member", 
               values_to = "Number of Lines") |> 
  mutate(Member = str_replace(Member, "total_", ""))

gg <- ggplot(member_lines |> 
         mutate(Member = fct_reorder(Member, `Number of Lines`)), 
       aes(x = Member, y = `Number of Lines`, fill = Member)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(
    title = "Number of Total Lines for each Spice Girl",
    x = "Spice Girls",
    y = "Number of Lines",
    caption = "Source: Your Dataset",
    subtitle = "The total lines for each member of the Spice Girls in the entire discography in order to determine who the most popular member was. Sporty Spice has the most, followed by Baby Spice, then Scary Spice, then Ginger Spice, then Posh Spice."
  ) +
  theme_minimal(base_family = "lato") +
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = "gray40"),
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(size = 12, color = "gray50", hjust = 0.5),
    plot.caption = element_text(size = 10, color = "gray50"),
    legend.position = "none"
  ) +
  scale_fill_viridis_d(option = "Set2")

  
ggplotly(gg) |> layout(showlegend = FALSE,
        x = 0.5,
        y = 1.05,
        xref = "paper",
        yref = "paper",
        showarrow = FALSE,
        font = list(size = 12, color = "gray50", family = "lato"),
        align = "center",
    xaxis = list(title = ""),  # Remove x-axis label
    yaxis = list(title = "")   # Remove y-axis label
  )
```

Perhaps different albums promoted different members? Released in 1996, Scary Spice was actually featured the most in their first album, *Spice*. Coming in second and third were Ginger and Baby Spice. The release of the second album *Spiceworld*, however, placed Sporty Spice in a more prominent role musically. She rose from having the fourth most lines to being the clear favorite, as the graph below shows. Scary Spice fell to third, with Baby Spice rising to second and Ginger falling further behind. Why did Sporty Spice receive so many more during the second album? There may not be one clear answer. Audience preferences, musical ability, and more are all factors that could explain the change. One thing however, is certain: Sporty Spice, on paper, became the most popular member of the Spice Girls.

```{r, fig.alt= Similar to the previous graph, this bar graph depicts the total lines for each member of the Spice Girls by album to notice if there were any major changes over the course of their 3 records. Some interesting differences is that Sporty Spice was did not have the most lines in the first album, instead it was Scary Spice. However, over the next two albums, Sporty Spice remained the clear favorite.}

#What About Individual Albums?
member_album_lines_per_album <- lyrics |>
  select(album_name, section_artist) |> 
  mutate(
    Sporty = str_detect(section_artist, "Sporty"),
    Scary = str_detect(section_artist, "Scary"),
    Posh = str_detect(section_artist, "Posh"),
    Baby = str_detect(section_artist, "Baby"),
    Ginger = str_detect(section_artist, "Ginger")
  ) |> 
  group_by(album_name) |> 
  summarize(
    total_Sporty = sum(Sporty, na.rm = TRUE),
    total_Scary = sum(Scary, na.rm = TRUE),
    total_Posh = sum(Posh, na.rm = TRUE),
    total_Baby = sum(Baby, na.rm = TRUE),
    total_Ginger = sum(Ginger, na.rm = TRUE),
    .groups = "drop"
  ) |> 
  pivot_longer(
    cols = starts_with("total_"),
    names_to = "Member",
    values_to = "Number of Lines"
  ) |> 
  mutate(Member = str_replace(Member, "total_", ""))  

member_album_lines_per_album <- member_album_lines_per_album |> 
  mutate(album_name = factor(album_name, levels = c("Spice", "Spiceworld", "Forever")))


gg2 <- ggplot(member_album_lines_per_album |> 
         mutate(Member = fct_reorder(Member, `Number of Lines`)), 
                aes(x = album_name, y = `Number of Lines`, fill = Member)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Number of Lines for Each Spice Girl by Album",
    x = "Album",
    y = "Number of Lines",
    fill = "Spice Girl",
    caption = "Source: Your Dataset"
  ) +
  theme_minimal(base_family = "lato") +
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = "gray40"),
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(size = 12, color = "gray50", hjust = 0.5),
    plot.caption = element_text(size = 10, color = "gray50"),
    legend.position = "bottom", 
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 11)
  ) +
  scale_fill_brewer(palette = "Set2")

ggplotly(gg2)

```

But what about the third album? Geri Halliwell-Horton left the group in 1998 to the shock of fans citing creative differences, exhaustion, as well as rumored arguments with Mel B. In response, The four remaining members remained and adapted their musical style and image for their next album *Forever*.

Despite a new R/B sound, Sporty Spice remained as the member with the most lines. Interestingly, the album has the least amount of lines out of their entire discography, which attests to the new their musical approach after the loss of Halliwell-Horton.

```{r, fig.alt= This graph depicts the words that are said the most times in Spice Girls' songs. This is the beginning of a larger lyrical analysis to determine key themes of the Spice Girls' lyrics. Top words include "love", "time", "wanna", and "dance".}

#What are the main lyrical themes? Let's start with top words
library(tokenizers)
library(tidytext)
lyrics_data <- lyrics |> 
  mutate(clean_lyrics = str_to_lower(line),  # Convert to lowercase
         clean_lyrics = str_replace_all(clean_lyrics, "[^a-z\\s]", ""),  # Remove punctuation
         clean_lyrics = str_squish(clean_lyrics))  # Remove extra spaces

tokens <- lyrics_data |> 
  unnest_tokens(word, clean_lyrics)  # 'word' column will contain individual words

custom_stop_words <- tibble(word = c("na", "la", "oh", "yeah", "im", "ill", "ya"))

data("stop_words")
combined_stop_words <- bind_rows(stop_words, custom_stop_words)

tokens <- tokens |> 
  anti_join(combined_stop_words, by = "word")

word_counts <- tokens|> 
  count(word, sort = TRUE)


bigrams <- lyrics_data |> 
  unnest_tokens(bigram, clean_lyrics, token = "ngrams", n = 2)

bigrams_filtered <- bigrams |> 
  separate(bigram, into = c("word1", "word2"), sep = " ") |> 
  filter(!word1 %in% stop_words$word, !word2 %in% stop_words$word) |> 
  unite("bigram", word1, word2, sep = " ")

data("stop_words")
tokens <- tokens |> 
  anti_join(stop_words, by = "word")

word_counts <- tokens |> 
  count(word, sort = TRUE)

# View top words
head(word_counts)

gg3 <- word_counts |> 
  slice_max(n, n = 20) |> 
  ggplot(aes(x = reorder(word, n), y = n, fill = n)) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  scale_fill_gradient(low = "lightblue", high = "steelblue") +
  labs(
    title = "Top Words in Song Lyrics",
    subtitle = "A bar chart showing the 20 most frequent words in lyrics after removing stop words",
    x = "Word",
    y = "Count",
    caption = "Source: Your Dataset"
  ) +
  theme_minimal(base_family = "lato") +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12),
    plot.caption = element_text(size = 10, color = "gray40"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank()
  )

ggplotly(gg3)
```

Moving to the lyrics themselves, the graph above shows the top words in all of the Spice Girls' lyrics, with filler words removed. "Love" takes the top spot, highlight the prominence of relationship themes, both romantic and platonic, in their music. "Time" is next. This could refer to time in romantic and platonic relationships. I.e. "not wanting to waste time." Additionally, "dance" "shake," and "move" all suggest that partying or celebrating are important topics in the Spice Girls' music. This all aligns with the fun, independent, confident image the Spice Girls' advertised during the 90s and beyond.

This is further supported by a sentiment analysis of the lyrics. The results show that the Spice Girls' songs contain more positive sentiment than negative.

```{r, fig.alt= This bar graph depicts the results of a sentiment analysis of the Spice Girls' lyrics. Results show that there is more positive sentiment than negative sentiment, by about 150 counts. This aligns with the notion that the Spice Girls' advocated for female empowerement and independence.}

#Sentiment analysis

sentiment_scores <- tokens |> 
  inner_join(get_sentiments("bing"), by = "word") |> 
  count(sentiment, sort = TRUE)

gg4 <- sentiment_scores |> 
  ggplot(aes(x = sentiment, y = n, fill = sentiment)) +
  geom_col() +
  labs(title = "Sentiment Analysis of Lyrics", x = "Sentiment", y = "Count") +
  scale_fill_manual(values = c("positive" = "green", "negative" = "red")) +
  theme_minimal(base_family = "lato") +
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = "gray40"),
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(size = 12, color = "gray50", hjust = 0.5),
    plot.caption = element_text(size = 10, color = "gray50"),
    legend.position = "bottom", 
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 11)
  )

ggplotly(gg4) |> layout(showlegend = FALSE)

```

To further expand our lyrical analysis, we can use a tf_idf generative model (more information in the appendix) to generate 3 major themes. As shown below, the model groups key words into different "topics," or themes. we can then analyze specific songs and albums to determine which themes are most prominent. This information can be helpful in determining which themes may have resonated with listeners when taking into account the popularity of the respective songs and albums. 

Theme one's top words include "time" and "deeper," therefore, we will call it the "time theme." Key words for theme two include "love", "holler", and "generation" while theme three is largely defined by "dance". Thus, they will be called the "love theme" and "dance theme", respectively.The themes are clearly subjective, with pretty significant overlap. This could mean that the Spice Girls explored only a couple of significant themes, like relationships and love, throughout their discography, opting to instead evolve in other ways.  
```{r, fig.alt= This graph depicts the results of a tf_idf analysis to determine 3 major themes, or "topics," in Spice Girls songs. There are three columns denoting each topic, with horizontal bar graphs recording the prominence of each word in their respective topic. This generative model unfortunately does not give the name for each topic, so it is up to the interpretation of the viewer. Topic one may be more of a sultry love theme, topic 2 may be related more to "games" played in romantic relationships, while topic three may be more dance related.}

library(tidyverse)
library(tidytext)
library(tokenizers)

tf_idf <- tokens |> 
  count(song_name, word, sort = TRUE) |>  
  bind_tf_idf(word, song_name, n)

# View top TF-IDF words
tf_idf |> 
  arrange(desc(tf_idf)) |> 
  head(10)

bigram_counts <- bigrams |> 
  count(bigram, sort = TRUE)


library(topicmodels)

# Create a document-term matrix
dtm <- tokens |> 
  count(song_name, word) |> 
  cast_dtm(song_name, word, n)

# Fit LDA model
lda_model <- LDA(dtm, k = 3, control = list(seed = 123))  # 'k' is the number of topics
topics <- tidy(lda_model, matrix = "beta")

topic_names <- c("1" = "Time Theme", "2" = "Love Theme", "3" = "Dance Theme")

# Replace topic numbers with descriptive names
topics <- topics %>%
  mutate(topic = factor(topic, levels = names(topic_names), labels = topic_names))

# View top words per topic
topics |> 
  group_by(topic) |> 
  slice_max(beta, n = 10) |> 
  ungroup() |> 
  ggplot(aes(x = reorder_within(term, beta, topic), y = beta, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  coord_flip() +
  scale_x_reordered() +
  labs(title = "Top Words per Topic", x = "Word", y = "proportion",
       caption = "Spice Girls TidyTuesday Dataset",
       subtitle = "Graph showing the topic distribution of the 3 Spice Girls albums"
  ) +
  scale_fill_brewer(palette = "Set2")


topics <- tidy(lda_model, matrix = "beta")  

top_words <- topics %>%
  group_by(topic) %>%
  slice_max(beta, n = 10) %>%  
  ungroup()

Song_topics <- tidy(lda_model, matrix = "gamma")  # 'gamma' represents the document-topic distributions

Song_topics_wide <- Song_topics %>%
  pivot_wider(
    names_from = topic,  # The topic column will become the new column names
    values_from = gamma,  # The gamma values will fill the columns
  )

topic_names <- c("Time Theme", "Love Theme", "Dance Theme")  # Adjust these names as needed
colnames(Song_topics_wide)[2:(1 + length(topic_names))] <- topic_names


# View document-topic distribution
head(Song_topics_wide)
```

```{r, fig.alt= Similar to the previous graph, this bar graph depicts the total lines for each member of the Spice Girls by album to notice if there were any major changes over the course of their 3 records. Some interesting differences is that Sporty Spice was did not have the most lines in the first album, instead it was Scary Spice. However, over the next two albums, Sporty Spice remained the clear favorite.}
#topic distribution by album

library(tidyverse)
library(plotly)

topics_wide <- read_csv("~/Desktop/Macalester School Materials/Macalester Fall 2024/project-team-spice/data/topics_wide.csv")


album_topics <- topics_wide |> 
  group_by(Album) |> 
  mutate(topics = fct_reorder(topics, `mean of topics`)) |>  
  ungroup()

album_topics <- album_topics |> 
  mutate(Album = fct_reorder(Album, `mean of topics`))

gg6 <- ggplot(
  album_topics, 
  aes(x = Album, y = `mean of topics`, fill = topics)
) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Topic Distribution Across Spice Girls Albums",
    x = "Album",
    y = "Mean Topic Proportion",
    fill = "Topic",
    caption = "Source: Your Dataset",
    subtitle = "Graph showing the topic distribution of the 3 Spice Girls albums"
  ) +
  theme_minimal(base_family = "lato") +
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = "gray40"),
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(size = 12, color = "gray50", hjust = 0.5),
    plot.caption = element_text(size = 10, color = "gray50"),
    legend.position = "bottom", 
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 11)
  ) +
  scale_fill_brewer(palette = "Set2")

ggplotly(gg6)

  
```

\#**What is TF-IDF?**

TF-IDF stands for term frequency-inverse document frequency. This model can be applied to a few different purposes, but I use it specifically for text summarization and keyword extraction to find and quantify the importance of specific words in Spice Girls songs.

Term frequency: There are multiple ways to define frequency, but here, it means the frequency of a particular word in the songs; how often a word is said in a song.

Inverse document frequency: I use this to find how common or uncommon a word is in the lyrics. This is particularly important to filter out filler words like "of" and "as."

Using both TF and IDF, I tried to find which words hold the most relevance in their songs. The higher the TF-IDF score, the more relevance the word holds in the song, while the less relevant it is, the closer the score is to zero.

This model isn't perfect, though. There may be some words, like "love," that are extremely common in their songs. However, their tf-idf score may be low because it is not especially unique, though it is still extremely important.

https://www.capitalone.com/tech/machine-learning/understanding-tf-idf/

\#**What is LDA Analysis?**

LDA analysis is a "probabilistic generative model" used here to analyze a collection of text–Spice Girls lyrics. You could also use this for articles, books, and other text. LDA approaches documents as a collection of themes or "Topics," which it them hopes to uncover by analyzing the words of the document.

https://medium.com/@pinakdatta/understanding-lda-unveiling-hidden-topics-in-text-data-9bbbd25ae162

https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation#:\~:text=In%20natural%20language%20processing%2C%20latent,of%20a%20Bayesian%20topic%20model.
